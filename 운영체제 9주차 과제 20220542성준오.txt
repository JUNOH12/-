### 📌 1. **First-Fit (최초 적합)**

**처음부터 검색하여** 요청된 크기보다 크거나 같은 **첫 번째 빈 공간**에 할당합니다.

* ✅ 빠르게 동작 (검색 중단이 빠름)
* ❗ 단점: 앞쪽에 작은 조각들이 많이 생겨 **외부 단편화** 발생 가능

🔎 **예시 설명**
2KB 요청 시 → 3KB 빈 공간이 가장 먼저 발견되므로 그곳에 할당

---

### 📌 2. **Best-Fit (최적 적합)**

모든 빈 공간 중에서 **요청 크기와 가장 근접한(작은 여유가 있는) 공간**에 할당합니다.

* ✅ 남는 공간을 최소화하여 **단편화를 줄임**
* ❗ 하지만 가장 적합한 공간을 찾기 위해 **전체 탐색** 필요 → 느릴 수 있음

🔎 **예시 설명**
2KB 요청 시 → 2.2KB 빈 공간이 가장 딱 맞음 → 거기에 할당 → 0.2KB의 새 홀 발생

---

### 📌 3. **Worst-Fit (최악 적합)**

모든 빈 공간 중에서 **가장 큰 공간**에 할당합니다.

* ✅ 큰 공간을 먼저 쪼개서 남은 공간이 의미 있게 쓰일 수 있게 함
* ❗ 결과적으로도 **단편화** 발생 가능

🔎 **예시 설명**
2KB 요청 시 → 가장 큰 8KB 공간에 할당



| 알고리즘           | 전략 요약                    | 장점                 | 단점            |

| First-Fit | 처음 만나는 빈 공간에 넣는다     | 빠름          | 앞부분 단편화 발생    |
| Best-Fit  | 가장 딱 맞는(남는 공간이 작은) 곳 | 공간 활용 효율적   | 느림 (전체 탐색 필요) |
| Worst-Fit | 가장 큰 공간에 넣는다         | 큰 단편화 방지 시도 | 공간 낭비 가능      |
